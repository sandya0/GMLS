rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is verified
    function isVerified() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true;
    }
    
    // Helper function to check if user is active
    function isActive() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive != false;
    }
    
    // Helper function to check if user is owner
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if this is the bootstrap admin creation
    function isBootstrapAdminCreation() {
      return request.auth != null && 
             request.resource.data.role == 'admin' &&
             request.resource.data.email != null &&
             request.resource.data.fullName != null;
    }
    
    // Helper function to validate disaster data
    function isValidDisaster() {
      return request.resource.data.keys().hasAll(['title', 'description', 'location', 'type', 'timestamp', 'affectedCount', 'reportedBy', 'status']) &&
             request.resource.data.type in ['EARTHQUAKE', 'FLOOD', 'WILDFIRE', 'LANDSLIDE', 'VOLCANO', 'TSUNAMI', 'HURRICANE', 'TORNADO', 'OTHER'] &&
             request.resource.data.status in ['REPORTED', 'VERIFIED', 'IN_PROGRESS', 'RESOLVED'] &&
             request.resource.data.affectedCount >= 0 &&
             request.resource.data.title is string &&
             request.resource.data.title.size() >= 3 &&
             request.resource.data.title.size() <= 200 &&
             request.resource.data.description is string &&
             request.resource.data.description.size() >= 10 &&
             request.resource.data.description.size() <= 2000 &&
             request.resource.data.location is string;
    }
    
    // Helper function to validate user data
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['fullName', 'email', 'role', 'isVerified', 'isActive', 'createdAt']) &&
             request.resource.data.role in ['admin', 'user'] &&
             request.resource.data.email is string &&
             request.resource.data.email.matches('.*@.*\\..*') &&
             request.resource.data.fullName is string &&
             request.resource.data.fullName.size() >= 2 &&
             request.resource.data.fullName.size() <= 100;
    }
    
    // Helper function to validate user updates
    function isValidUserUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName', 'phoneNumber', 'address', 'isVerified', 'isActive', 'updatedAt', 
                          'latitude', 'longitude', 'dateOfBirth', 'gender', 'nationalId', 'familyCardNumber', 
                          'placeOfBirth', 'religion', 'maritalStatus', 'familyRelationshipStatus', 
                          'lastEducation', 'occupation', 'economicStatus', 'bloodType', 'medicalConditions',
                          'disabilities', 'emergencyContactName', 'emergencyContactRelationship',
                          'emergencyContactPhone', 'householdMembers', 'locationPermissionGranted',
                          'profilePictureUrl', 'fcmToken', 'lastLocationUpdate', 'lastLoginAt']) &&
             (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['fullName']) ||
              (request.resource.data.fullName is string && 
               request.resource.data.fullName.size() >= 2 && 
               request.resource.data.fullName.size() <= 100)) &&
             (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['phoneNumber']) ||
              request.resource.data.phoneNumber == null ||
              (request.resource.data.phoneNumber is string && 
               request.resource.data.phoneNumber.size() >= 10 && 
               request.resource.data.phoneNumber.size() <= 15));
    }
    
    // Helper function to check if user can modify roles
    function canModifyUserRole() {
      return isAdmin() && 
             (request.auth.uid != resource.id || 
              request.resource.data.role == resource.data.role);
    }
    
    // Users collection - Enhanced security with bootstrap support
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        isAdmin() || 
        (isVerified() && isActive())
      );
      
      allow create: if isAuthenticated() && (
        (isOwner(userId) && isValidUserData() && request.resource.data.role == 'user') ||
        (isAdmin() && isValidUserData()) ||
        (isOwner(userId) && isBootstrapAdminCreation())
      );
      
      allow update: if isAuthenticated() && isValidUserUpdate() && isActive() && (
        (isOwner(userId) && 
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) &&
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isVerified'])) ||
        (isAdmin() && (
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) ||
          canModifyUserRole()
        )) ||
        (isOwner(userId) && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'isVerified', 'updatedAt']) &&
         request.resource.data.role == 'admin')
      );
      
      allow delete: if isAdmin() && request.auth.uid != userId;
      
      match /reportedDisasters/{disasterId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow write: if isAuthenticated() && isActive() && (isOwner(userId) || isAdmin());
      }
    }
    
    // Disasters collection
    match /disasters/{disasterId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && isActive() && isValidDisaster() && (
        request.resource.data.reportedBy == request.auth.uid ||
        isAdmin()
      );
      
      allow update: if isAuthenticated() && isActive() && (
        (resource.data.reportedBy == request.auth.uid) ||
        isAdmin() ||
        (isVerified() &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']))
      );
      
      allow delete: if isAuthenticated() && (
        (resource.data.reportedBy == request.auth.uid && 
         (request.time.toMillis() - resource.data.timestamp.toMillis()) < 86400000) ||
        isAdmin()
      );
    }
    
    // Admin audit logs collection
    match /admin_audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin() && 
                   request.resource.data.adminId == request.auth.uid &&
                   request.resource.data.timestamp != null &&
                   request.resource.data.action != null &&
                   request.resource.data.adminName != null;
      allow update: if false;
      allow delete: if false;
    }
    
    // User sessions collection
    match /user_sessions/{sessionId} {
      allow read: if isAuthenticated() && (
        isOwner(sessionId) || 
        isAdmin()
      );
      allow create: if isAuthenticated() && isOwner(sessionId) &&
                   request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && isOwner(sessionId) &&
                   request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (isOwner(sessionId) || isAdmin());
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.type == "BROADCAST" ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        isAdmin() ||
        (request.resource.data.userId == request.auth.uid &&
         request.resource.data.title != null &&
         request.resource.data.message != null &&
         request.resource.data.timestamp != null)
      );
      allow update: if isAuthenticated() && (
        (resource.data.userId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readAt'])) ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // User notifications subcollection
    match /user_notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        isAdmin() ||
        request.resource.data.userId == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        (resource.data.userId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt'])) ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // System settings
    match /systemSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Analytics collection
    match /analytics/{analyticsId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Admin statistics collection
    match /admin_stats/{statId} {
      allow read: if isAdmin();
      allow write: if false;
    }
    
    // Emergency contacts
    match /emergencyContacts/{contactId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Resources collection
    match /resources/{resourceId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() || isVerified();
      allow update: if isAdmin() || (isVerified() && resource.data.createdBy == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Admin logs
    match /adminLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }
    
    // Audit trail
    match /auditTrail/{auditId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }
    
    // Reports collection
    match /reports/{reportId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // FCM tokens collection
    match /fcmTokens/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow write: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }
    
    // User feedback and support tickets
    match /support/{ticketId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated() && isActive() &&
                   request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        (resource.data.userId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'userResponse', 'updatedAt'])) ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Application logs
    match /appLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if isAdmin();
    }
    
    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 